[
    {
        "abs": "obtain magnitude of each element"
    },
    {
        "accu": "accumulate (sum) all elements"
    },
    {
        "affmul": "affine matrix multiplication"
    },
    {
        "all": "check whether all elements are non-zero, or satisfy a relational condition"
    },
    {
        "any": "check whether any element is non-zero, or satisfies a relational condition"
    },
    {
        "approx_equal": "approximate equality"
    },
    {
        "arg": "phase angle of each element"
    },
    {
        "as_scalar": "convert 1x1 matrix to pure scalar"
    },
    {
        "clamp": "obtain clamped elements according to given limits"
    },
    {
        "cond": "condition number of matrix"
    },
    {
        "conj": "obtain complex conjugate of each element"
    },
    {
        "conv_to": "convert/cast between matrix types"
    },
    {
        "cross": "cross product"
    },
    {
        "cumsum": "cumulative sum"
    },
    {
        "cumprod": "cumulative product"
    },
    {
        "det": "determinant"
    },
    {
        "diagmat": "generate diagonal matrix from given matrix or vector"
    },
    {
        "diagvec": "extract specified diagonal"
    },
    {
        "diags / spdiags": "generate band matrix from given set of vectors"
    },
    {
        "diff": "differences between adjacent elements"
    },
    {
        "dot / cdot / norm_dot": "dot product"
    },
    {
        "eps": "obtain distance of each element to next largest floating point representation"
    },
    {
        "expmat": "matrix exponential"
    },
    {
        "expmat_sym": "matrix exponential of symmetric matrix"
    },
    {
        "find": "find indices of non-zero elements, or elements satisfying a relational condition"
    },
    {
        "find_finite": "find indices of finite elements"
    },
    {
        "find_nonfinite": "find indices of non-finite elements"
    },
    {
        "find_nan": "find indices of NaN elements"
    },
    {
        "find_unique": "find indices of unique elements"
    },
    {
        "fliplr / flipud": "flip matrix left to right or upside down"
    },
    {
        "imag / real": "extract imaginary/real part"
    },
    {
        "ind2sub": "convert linear index to subscripts"
    },
    {
        "index_min / index_max": "indices of extremum values"
    },
    {
        "inplace_trans": "in-place transpose"
    },
    {
        "intersect": "find common elements in two vectors/matrices"
    },
    {
        "join_rows / join_cols": "concatenation of matrices"
    },
    {
        "join_slices": "concatenation of cubes"
    },
    {
        "kron": "Kronecker tensor product"
    },
    {
        "log_det": "log determinant"
    },
    {
        "log_det_sympd": "log determinant of symmetric positive definite matrix"
    },
    {
        "logmat": "matrix logarithm"
    },
    {
        "logmat_sympd": "matrix logarithm of symmetric matrix"
    },
    {
        "min / max": "return extremum values"
    },
    {
        "nonzeros": "return non-zero values"
    },
    {
        "norm": "various norms of vectors and matrices"
    },
    {
        "norm2est": "fast estimate of the matrix 2-norm"
    },
    {
        "normalise": "normalise vectors to unit p-norm"
    },
    {
        "pow": "element-wise power"
    },
    {
        "powmat": "matrix power"
    },
    {
        "prod": "product of elements"
    },
    {
        "rank": "rank of matrix"
    },
    {
        "rcond": "reciprocal condition number"
    },
    {
        "repelem": "replicate elements"
    },
    {
        "repmat": "replicate matrix in block-like fashion"
    },
    {
        "reshape": "change size while keeping elements"
    },
    {
        "resize": "change size while keeping elements and preserving layout"
    },
    {
        "reverse": "reverse order of elements"
    },
    {
        "roots": "roots of polynomial"
    },
    {
        "shift": "shift elements"
    },
    {
        "shuffle": "randomly shuffle elements"
    },
    {
        "size": "obtain dimensions of given object"
    },
    {
        "sort": "sort elements"
    },
    {
        "sort_index": "vector describing sorted order of elements"
    },
    {
        "sqrtmat": "square root of matrix"
    },
    {
        "sqrtmat_sympd": "square root of symmetric matrix"
    },
    {
        "sum": "sum of elements"
    },
    {
        "sub2ind": "convert subscripts to linear index"
    },
    {
        "symmatu / symmatl": "generate symmetric matrix from given matrix"
    },
    {
        "trace": "sum of diagonal elements"
    },
    {
        "trans": "transpose of matrix"
    },
    {
        "trapz": "trapezoidal numerical integration"
    },
    {
        "trimatu / trimatl": "copy upper/lower triangular part"
    },
    {
        "trimatu_ind / trimatl_ind": "obtain indices of upper/lower triangular part"
    },
    {
        "unique": "return unique elements"
    },
    {
        "vecnorm": "obtain vector norm of each row or column of a matrix"
    },
    {
        "vectorise": "flatten matrix into vector"
    },
    {
        "misc functions": "miscellaneous element-wise functions: exp, log, sqrt, round, sign, ..."
    },
    {
        "trig functions": "trigonometric element-wise functions: cos, sin, tan, ..."
    }
]